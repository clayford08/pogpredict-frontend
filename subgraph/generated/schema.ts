// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get wins(): BigInt {
    let value = this.get("wins");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set wins(value: BigInt) {
    this.set("wins", Value.fromBigInt(value));
  }

  get losses(): BigInt {
    let value = this.get("losses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set losses(value: BigInt) {
    this.set("losses", Value.fromBigInt(value));
  }

  get totalWinnings(): BigInt {
    let value = this.get("totalWinnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWinnings(value: BigInt) {
    this.set("totalWinnings", Value.fromBigInt(value));
  }

  get totalLost(): BigInt {
    let value = this.get("totalLost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLost(value: BigInt) {
    this.set("totalLost", Value.fromBigInt(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get lastActiveTimestamp(): BigInt {
    let value = this.get("lastActiveTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActiveTimestamp(value: BigInt) {
    this.set("lastActiveTimestamp", Value.fromBigInt(value));
  }

  get currentStreak(): BigInt {
    let value = this.get("currentStreak");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentStreak(value: BigInt) {
    this.set("currentStreak", Value.fromBigInt(value));
  }

  get bestStreak(): BigInt {
    let value = this.get("bestStreak");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bestStreak(value: BigInt) {
    this.set("bestStreak", Value.fromBigInt(value));
  }

  get largestWin(): BigInt {
    let value = this.get("largestWin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set largestWin(value: BigInt) {
    this.set("largestWin", Value.fromBigInt(value));
  }

  get largestLoss(): BigInt {
    let value = this.get("largestLoss");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set largestLoss(value: BigInt) {
    this.set("largestLoss", Value.fromBigInt(value));
  }

  get totalROI(): BigDecimal {
    let value = this.get("totalROI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalROI(value: BigDecimal) {
    this.set("totalROI", Value.fromBigDecimal(value));
  }

  get bets(): BetLoader {
    return new BetLoader("User", this.get("id")!.toString(), "bets");
  }

  get marketsCreated(): MarketLoader {
    return new MarketLoader(
      "User",
      this.get("id")!.toString(),
      "marketsCreated",
    );
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Market", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Market | null {
    return changetype<Market | null>(store.get_in_block("Market", id));
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get question(): string {
    let value = this.get("question");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }

  get optionA(): string {
    let value = this.get("optionA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set optionA(value: string) {
    this.set("optionA", Value.fromString(value));
  }

  get optionB(): string {
    let value = this.get("optionB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set optionB(value: string) {
    this.set("optionB", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get logoUrlA(): string {
    let value = this.get("logoUrlA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set logoUrlA(value: string) {
    this.set("logoUrlA", Value.fromString(value));
  }

  get logoUrlB(): string {
    let value = this.get("logoUrlB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set logoUrlB(value: string) {
    this.set("logoUrlB", Value.fromString(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get oracleMatchId(): BigInt {
    let value = this.get("oracleMatchId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oracleMatchId(value: BigInt) {
    this.set("oracleMatchId", Value.fromBigInt(value));
  }

  get totalPoolA(): BigInt {
    let value = this.get("totalPoolA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPoolA(value: BigInt) {
    this.set("totalPoolA", Value.fromBigInt(value));
  }

  get totalPoolB(): BigInt {
    let value = this.get("totalPoolB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPoolB(value: BigInt) {
    this.set("totalPoolB", Value.fromBigInt(value));
  }

  get outcome(): i32 {
    let value = this.get("outcome");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set outcome(value: i32) {
    this.set("outcome", Value.fromI32(value));
  }

  get resolvedBy(): Bytes | null {
    let value = this.get("resolvedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set resolvedBy(value: Bytes | null) {
    if (!value) {
      this.unset("resolvedBy");
    } else {
      this.set("resolvedBy", Value.fromBytes(<Bytes>value));
    }
  }

  get resolutionDetails(): string | null {
    let value = this.get("resolutionDetails");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolutionDetails(value: string | null) {
    if (!value) {
      this.unset("resolutionDetails");
    } else {
      this.set("resolutionDetails", Value.fromString(<string>value));
    }
  }

  get resolutionTimestamp(): BigInt | null {
    let value = this.get("resolutionTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set resolutionTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("resolutionTimestamp");
    } else {
      this.set("resolutionTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get bets(): BetLoader {
    return new BetLoader("Market", this.get("id")!.toString(), "bets");
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get priceHistory(): PriceSnapshotLoader {
    return new PriceSnapshotLoader(
      "Market",
      this.get("id")!.toString(),
      "priceHistory",
    );
  }

  get currentPriceA(): BigDecimal {
    let value = this.get("currentPriceA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set currentPriceA(value: BigDecimal) {
    this.set("currentPriceA", Value.fromBigDecimal(value));
  }

  get currentPriceB(): BigDecimal {
    let value = this.get("currentPriceB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set currentPriceB(value: BigDecimal) {
    this.set("currentPriceB", Value.fromBigDecimal(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Bet | null {
    return changetype<Bet | null>(store.get_in_block("Bet", id));
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get isOptionA(): boolean {
    let value = this.get("isOptionA");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isOptionA(value: boolean) {
    this.set("isOptionA", Value.fromBoolean(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get winnings(): BigInt | null {
    let value = this.get("winnings");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winnings(value: BigInt | null) {
    if (!value) {
      this.unset("winnings");
    } else {
      this.set("winnings", Value.fromBigInt(<BigInt>value));
    }
  }

  get outcome(): i32 {
    let value = this.get("outcome");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set outcome(value: i32) {
    this.set("outcome", Value.fromI32(value));
  }
}

export class GlobalStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStat | null {
    return changetype<GlobalStat | null>(store.get_in_block("GlobalStat", id));
  }

  static load(id: string): GlobalStat | null {
    return changetype<GlobalStat | null>(store.get("GlobalStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalMarkets(): BigInt {
    let value = this.get("totalMarkets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalMarkets(value: BigInt) {
    this.set("totalMarkets", Value.fromBigInt(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalVolumeStaked(): BigInt {
    let value = this.get("totalVolumeStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeStaked(value: BigInt) {
    this.set("totalVolumeStaked", Value.fromBigInt(value));
  }

  get totalWinnings(): BigInt {
    let value = this.get("totalWinnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWinnings(value: BigInt) {
    this.set("totalWinnings", Value.fromBigInt(value));
  }

  get averageROI(): BigDecimal {
    let value = this.get("averageROI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageROI(value: BigDecimal) {
    this.set("averageROI", Value.fromBigDecimal(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }
}

export class PriceSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceSnapshot | null {
    return changetype<PriceSnapshot | null>(
      store.get_in_block("PriceSnapshot", id),
    );
  }

  static load(id: string): PriceSnapshot | null {
    return changetype<PriceSnapshot | null>(store.get("PriceSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get priceA(): BigDecimal {
    let value = this.get("priceA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceA(value: BigDecimal) {
    this.set("priceA", Value.fromBigDecimal(value));
  }

  get priceB(): BigDecimal {
    let value = this.get("priceB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceB(value: BigDecimal) {
    this.set("priceB", Value.fromBigDecimal(value));
  }

  get totalPoolA(): BigInt {
    let value = this.get("totalPoolA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPoolA(value: BigInt) {
    this.set("totalPoolA", Value.fromBigInt(value));
  }

  get totalPoolB(): BigInt {
    let value = this.get("totalPoolB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPoolB(value: BigInt) {
    this.set("totalPoolB", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class BetLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Bet[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Bet[]>(value);
  }
}

export class MarketLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Market[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Market[]>(value);
  }
}

export class PriceSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PriceSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PriceSnapshot[]>(value);
  }
}
