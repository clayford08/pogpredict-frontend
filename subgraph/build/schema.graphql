type User @entity {
  id: ID! # user address
  totalBets: BigInt!
  wins: BigInt!
  losses: BigInt!
  totalWinnings: BigInt!
  totalLost: BigInt!
  totalStaked: BigInt!
  lastActiveTimestamp: BigInt!
  currentStreak: BigInt!
  bestStreak: BigInt!
  largestWin: BigInt!
  largestLoss: BigInt!
  totalROI: BigDecimal!
  bets: [Bet!]! @derivedFrom(field: "user")
  marketsCreated: [Market!]! @derivedFrom(field: "creator")
}

type Market @entity {
  id: ID! # market id
  creator: User!
  question: String!
  optionA: String!
  optionB: String!
  category: String!
  logoUrlA: String!
  logoUrlB: String!
  endTime: BigInt!
  oracleMatchId: BigInt!
  totalPoolA: BigInt!
  totalPoolB: BigInt!
  outcome: Int # null if not resolved
  resolvedBy: Bytes # address of resolver
  resolutionDetails: String
  resolutionTimestamp: BigInt
  bets: [Bet!]! @derivedFrom(field: "market")
  createdAt: BigInt!
  priceHistory: [PriceSnapshot!]! @derivedFrom(field: "market")
  currentPriceA: BigDecimal!
  currentPriceB: BigDecimal!
}

type Bet @entity {
  id: ID! # marketId-userAddress-txHash
  user: User!
  market: Market!
  isOptionA: Boolean!
  amount: BigInt!
  timestamp: BigInt!
  claimed: Boolean!
  winnings: BigInt # null if lost or not claimed
  outcome: Int # 0 = unresolved, 1 = won, 2 = lost
}

type GlobalStat @entity {
  id: ID! # "global"
  totalUsers: BigInt!
  totalMarkets: BigInt!
  totalBets: BigInt!
  totalVolumeStaked: BigInt!
  totalWinnings: BigInt!
  averageROI: BigDecimal!
  lastUpdateTimestamp: BigInt!
}

type PriceSnapshot @entity {
  id: ID!
  market: Market!
  timestamp: BigInt!
  priceA: BigDecimal!
  priceB: BigDecimal!
  totalPoolA: BigInt!
  totalPoolB: BigInt!
  blockNumber: BigInt!
}

type _Schema_ @fulltext(
  name: "marketSearch"
  language: en
  algorithm: rank
  include: [
    {
      entity: "Market"
      fields: [
        { name: "question" },
        { name: "optionA" },
        { name: "optionB" },
        { name: "category" }
      ]
    }
  ]
) 