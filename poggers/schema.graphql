type User @entity {
  id: ID!
  totalBets: BigInt!
  wins: BigInt!
  losses: BigInt!
  totalWinnings: BigInt!
  totalLost: BigInt!
  totalStaked: BigInt!
  lastActiveTimestamp: BigInt!
  currentStreak: BigInt!
  bestStreak: BigInt!
  largestWin: BigInt!
  largestLoss: BigInt!
  totalROI: BigDecimal!
  bets: [Bet!]! @derivedFrom(field: "user")
  monthlyStats: [MonthlyStat!]! @derivedFrom(field: "user")
}

type Market @entity {
  id: ID!
  creator: User!
  question: String!
  optionA: String!
  optionB: String!
  category: String!
  logoUrlA: String!
  logoUrlB: String!
  endTime: BigInt!
  oracleMatchId: BigInt!
  totalPoolA: BigInt!
  totalPoolB: BigInt!
  outcome: Int
  resolvedBy: Bytes
  resolutionDetails: String
  resolutionTimestamp: BigInt
  createdAt: BigInt!
  currentPriceA: BigDecimal!
  currentPriceB: BigDecimal!
  priceHistory: [PriceSnapshot!]! @derivedFrom(field: "market")
  bets: [Bet!]! @derivedFrom(field: "market")
}

type Bet @entity {
  id: ID!
  user: User!
  market: Market!
  isOptionA: Boolean!
  amount: BigInt!
  timestamp: BigInt!
  claimed: Boolean!
  winnings: BigInt
  outcome: Int # 0 = unresolved, 1 = won, 2 = lost
}

type MonthlyStat @entity {
  id: ID!
  user: User!
  yearMonth: String!
  wins: BigInt!
  losses: BigInt!
  winnings: BigInt!
  staked: BigInt!
  optionACount: BigInt!
  optionBCount: BigInt!
}

type GlobalStat @entity {
  id: ID!
  totalUsers: BigInt!
  totalMarkets: BigInt!
  totalBets: BigInt!
  totalVolumeStaked: BigInt!
  totalWinnings: BigInt!
  averageROI: BigDecimal!
  lastUpdateTimestamp: BigInt!
}

type PriceSnapshot @entity {
  id: ID!
  market: Market!
  timestamp: BigInt!
  priceA: BigDecimal!
  priceB: BigDecimal!
  totalPoolA: BigInt!
  totalPoolB: BigInt!
  blockNumber: BigInt!
}

# Event entities
type ContractSettingUpdated @entity(immutable: true) {
  id: Bytes!
  setting: String!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeRecipientChanged @entity(immutable: true) {
  id: Bytes!
  oldRecipient: Bytes!
  newRecipient: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ManualResolutionToggled @entity(immutable: true) {
  id: Bytes!
  enabled: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketCreated @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt!
  question: String!
  optionA: String!
  optionB: String!
  category: String!
  logoUrlA: String!
  logoUrlB: String!
  endTime: BigInt!
  oracleMatchId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketRefunded @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt!
  reason: String!
  resolvedBy: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketResolved @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt!
  outcome: Int!
  source: Int!
  details: String!
  resolvedBy: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OptionBought @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  isOptionA: Boolean!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OptionSold @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  isOptionA: Boolean!
  amount: BigInt!
  payout: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OracleUpdaterChanged @entity(immutable: true) {
  id: Bytes!
  oldUpdater: Bytes!
  newUpdater: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionLost @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PositionWon @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReferralFeeDistributed @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  referrer: Bytes!
  amount: BigInt!
  marketId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefundClaimed @entity(immutable: true) {
  id: Bytes!
  marketId: BigInt!
  user: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserLost @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserWon @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WinningsClaimed @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  marketId: BigInt!
  payout: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
